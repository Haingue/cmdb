package com.management.cmdb.services.inventory.service.impl;

import com.management.cmdb.services.inventory.dto.ItemTypeDto;
import com.management.cmdb.services.inventory.dto.wrapper.PaginatedResponseDto;
import com.management.cmdb.services.inventory.entity.ItemTypeEntity;
import com.management.cmdb.services.inventory.exception.ItemTypeNotExist;
import com.management.cmdb.services.inventory.mapper.ItemTypeMapper;
import com.management.cmdb.services.inventory.model.UserDetail;
import com.management.cmdb.services.inventory.repository.ItemTypeRepository;
import com.management.cmdb.services.inventory.service.ItemTypeService;
import org.springframework.ai.tool.annotation.Tool;
import org.springframework.data.domain.PageRequest;
import org.springframework.stereotype.Service;
import org.springframework.util.ObjectUtils;

import java.util.UUID;

@Service
public class ItemTypeServiceImpl implements ItemTypeService {

    private final ItemTypeRepository itemTypeRepository;

    public ItemTypeServiceImpl(ItemTypeRepository itemTypeRepository) {
        this.itemTypeRepository = itemTypeRepository;
    }

    @Override
    @Tool(description = "Create new item type, first step toItemId create new type of entities in the CMDB, the uuid will be generated by the tool so you can keep blank or omit it")
    public ItemTypeDto create(ItemTypeDto itemTypeDto, UserDetail author) {
        // TODO check user details

        if (ObjectUtils.isEmpty(itemTypeDto.label()) || ObjectUtils.isEmpty(itemTypeDto.description())) throw new ItemTypeNotExist();

        ItemTypeEntity newEntity = ItemTypeMapper.INSTANCE.toEntity(itemTypeDto);
        newEntity.setUuid(UUID.randomUUID());
        newEntity.setCreatedBy(author.uuid());

        newEntity.getAttributes().forEach(attribute -> {
            attribute.setUuid(UUID.randomUUID());
            attribute.setCreatedBy(author.uuid());
        });

        newEntity = itemTypeRepository.save(newEntity);
        return ItemTypeMapper.INSTANCE.toDto(newEntity);
    }

    @Override
    @Tool(description = "Find one item type using its uuid")
    public ItemTypeDto findById(UUID id) {
        return ItemTypeMapper.INSTANCE.toDto(
                itemTypeRepository.findById(id)
                        .orElseThrow(ItemTypeNotExist::new)
        );
    }

    @Override
    @Tool(description = "Search all all item type which contains the label, the result will be paginated so the page number start at 0")
    public PaginatedResponseDto<ItemTypeDto> search(String label, int page, int size) {
        if (label == null || label.isEmpty()) label = "";
        return PaginatedResponseDto.<ItemTypeDto, ItemTypeEntity>toPaginatedDto(
                itemTypeRepository.searchAllByLabelContainingIgnoreCase(label, PageRequest.of(page, size)),
                ItemTypeMapper.INSTANCE::toDto);
    }
}
