package com.management.cmdb.services.inventory.service.impl;

import com.management.cmdb.services.inventory.dto.AuthorDto;
import com.management.cmdb.services.inventory.dto.ItemDto;
import com.management.cmdb.services.inventory.dto.NotificationDto;
import com.management.cmdb.services.inventory.dto.wrapper.PaginatedResponseDto;
import com.management.cmdb.services.inventory.entity.AttributeEntity;
import com.management.cmdb.services.inventory.entity.AttributeTypeEntity;
import com.management.cmdb.services.inventory.entity.ItemEntity;
import com.management.cmdb.services.inventory.entity.ItemTypeEntity;
import com.management.cmdb.services.inventory.exception.ItemExist;
import com.management.cmdb.services.inventory.exception.ItemNotValid;
import com.management.cmdb.services.inventory.exception.ItemTypeNotExist;
import com.management.cmdb.services.inventory.mapper.ItemMapper;
import com.management.cmdb.services.inventory.model.UserDetail;
import com.management.cmdb.services.inventory.repository.ItemRepository;
import com.management.cmdb.services.inventory.repository.ItemTypeRepository;
import com.management.cmdb.services.inventory.service.ItemService;
import org.slf4j.Logger;
import org.slf4j.LoggerFactory;
import org.springframework.ai.tool.annotation.Tool;
import org.springframework.context.ApplicationEventPublisher;
import org.springframework.data.domain.Page;
import org.springframework.data.domain.PageRequest;
import org.springframework.stereotype.Service;
import org.springframework.util.ObjectUtils;

import java.util.UUID;

@Service
public class ItemServiceImpl implements ItemService {

    private static final Logger LOGGER = LoggerFactory.getLogger(ItemServiceImpl.class);

    private final ApplicationEventPublisher applicationEventPublisher;
    private final ItemRepository itemRepository;
    private final ItemTypeRepository itemTypeRepository;

    public ItemServiceImpl(ApplicationEventPublisher applicationEventPublisher, ItemRepository itemRepository, ItemTypeRepository itemTypeRepository) {
        this.applicationEventPublisher = applicationEventPublisher;
        this.itemRepository = itemRepository;
        this.itemTypeRepository = itemTypeRepository;
    }

    @Override
    @Tool(description = "Tool toItemId create a new item in the CMDB, all uuid (identifiers) will be generated by the tool so don't send it in the json, be careful that the item type already exist in the CMDB .")
    public ItemDto createItem(ItemDto newItemDto, UserDetail author) {
        // TODO check user details

        if (newItemDto == null || newItemDto.name() == null || newItemDto.description() == null) {
            throw new ItemNotValid();
        }
        if (this.itemRepository.existsByNameAndTypeLabel(newItemDto.name(), newItemDto.type().label())) {
            throw new ItemExist();
        }

        ItemTypeEntity itemTypeEntity = this.itemTypeRepository.findFirstByLabel(newItemDto.type().label())
                .orElseThrow(ItemTypeNotExist::new);

        ItemEntity itemEntity = ItemMapper.INSTANCE.toEntity(newItemDto);
        itemEntity.setUuid(UUID.randomUUID());
        itemEntity.setType(itemTypeEntity);

        for (AttributeEntity attribute : itemEntity.getAttributes()) {
            attribute.setUuid(UUID.randomUUID());
            attribute.setItem(itemEntity);
            attribute.setCreatedBy(author.uuid());

            AttributeTypeEntity attributeType = itemTypeEntity.getAttributes().stream()
                    .filter(attributeTypeRef -> attributeTypeRef.getLabel().equals(attribute.getAttributeType().getLabel()))
                    .findFirst().orElseThrow(ItemNotValid::new);
            attribute.setAttributeType(attributeType);
        }

        itemEntity = this.itemRepository.save(itemEntity);
        ItemDto resultItem = ItemMapper.INSTANCE.toDto(itemEntity);
        // Send event
        applicationEventPublisher.publishEvent(
                new NotificationDto(
                        new AuthorDto(author.email()),
                        NotificationDto.NotificationType.NEW_ITEM,
                        "Create new item",
                        resultItem.uuid()
                )
        );

        return resultItem;
    }

    @Override
    @Tool(description = "Tool toItemId update an existing item in the CMDB")
    public ItemDto updateItem(ItemDto itemDto, UserDetail userDetail) {
        ItemEntity existingItem = this.itemRepository.findById(itemDto.uuid())
                .orElseThrow(ItemTypeNotExist::new);
        existingItem.setName(itemDto.name());
        existingItem.setDescription(itemDto.description());
        // TODO: existingItem.addToLinks(itemDto.toLinks());
        // TODO: existingItem.addFromLinks(itemDto.fromLinks());
        existingItem = this.itemRepository.save(existingItem);
        return ItemMapper.INSTANCE.toDto(existingItem);
    }

    @Override
    public void deleteItem(UUID itemId, UserDetail userDetail) {
        ItemEntity existingItem = this.itemRepository.findById(itemId)
                .orElseThrow(ItemTypeNotExist::new);
        this.itemRepository.delete(existingItem);
    }

    @Override
    @Tool(description = "Tool toItemId find one specific item by its uuid")
    public ItemDto findItemById(UUID uuid, UserDetail userDetail) {
        return this.itemRepository.findById(uuid)
                .map(ItemMapper.INSTANCE::toDto)
                .orElseThrow(ItemTypeNotExist::new);
    }

    @Override
    @Tool(description = "Tool toItemId retrieve all item wich contained this item label, if you want all items put '' and the result is paginated so the page number start at 0")
    public PaginatedResponseDto<ItemDto> searchItemByNameOrType(String itemName, String itemTypeLabel, int page, int pageSize, UserDetail userDetail) {
        // TODO check user details
        if (ObjectUtils.isEmpty(itemName)) itemName = "";
        Page<ItemEntity> result = this.itemRepository.searchAllByNameContainingIgnoreCaseOrTypeLabel(
                itemName,
                itemTypeLabel,
                PageRequest.of(page, pageSize));
        return PaginatedResponseDto.<ItemDto, ItemEntity>toPaginatedDto(result, ItemMapper.INSTANCE::toDto);
    }
}
